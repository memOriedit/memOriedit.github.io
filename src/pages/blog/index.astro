---
import BaseLayout from '../../layouts/BaseLayout.astro';
import Header from '../../components/Header.astro';
import Footer from '../../components/Footer.astro';
import { getBlogPosts, getCategories, type BlogPost } from '../../lib/microcms';

// Helper function to get the appropriate icon for a blog post
function getPostIcon(post: BlogPost): string {
  // For news/announcements, use log.png
  if (post.category.name === 'お知らせ') {
    return '/images/icon_ball.png';
  }

  console.log(post.writer);
  // For blog posts, try to use first writer's icon from staff directory
  if (post.category.name === 'ブログ' && post.writer && post.writer.length > 0 && post.writer[0]) {
    const firstWriter = post.writer[0].toString();

    switch(firstWriter){
      case 'キンギョ':
        return '/images/staff/kingyo.png';
      case 'へのへのん':
        return '/images/staff/henohenon.png';
      case 'Kyosū!':
        return '/images/staff/kyosu.jpg';
    }
  }
  
  // Fallback to default icon
  return '/images/logo.png';
}

// Get blog posts based on category filter
let blogPosts = [] as BlogPost[];
let categories = [];
try {
  const postsResponse = await getBlogPosts(50, 0);
  blogPosts = postsResponse.contents as BlogPost[];

  const categoriesResponse = await getCategories();
  categories = categoriesResponse.contents;
} catch (error) {
  console.error('Failed to fetch blog data:', error);
}

---

<BaseLayout title="ブログ - memOriedit">
  <Header />

  <main>
    <section class="section blog-page">
      <div class="container">
        <h1>ブログ</h1>

        <!-- Category Filter Buttons -->
        <div class="category-filters">
          <button class="filter-btn active" data-category="all">
              すべて
          </button>
          <button class="filter-btn" data-category="blog">
              ブログ
          </button>
          <button class="filter-btn" data-category="news">
              お知らせ
          </button>
        </div>

        <!-- Blog Posts Grid -->
        <div class="blog-grid">
          {blogPosts.length > 0 ? (
            blogPosts.map((post) => (
              <a href={`/blog/${post.id}`} class="blog-card-link" data-category={post.category.name === 'ブログ' ? 'blog' : post.category.name === 'お知らせ' ? 'news' : 'other'}>
                <article class="blog-card card">
                  <div class="blog-thumbnail">
                    {post.thumbnail ? (
                      <img src={post.thumbnail.url} alt={post.title} />
                    ) : post.category.name === 'お知らせ' ? (
                      <div class="icon-hover-container">
                        <img src="/images/icon_ball.png" alt="サムネイル" class="default-icon"/>
                        <img src="/images/icon_eye.png" alt="サムネイル" class="hover-icon"/>
                      </div>
                    ) : post.writer && post.writer.length > 0 && post.writer[0].toString() === 'へのへのん' ? (
                      <div class="icon-hover-container henohenon-hover">
                        <img src="/images/staff/henohenon.png" alt="サムネイル" class="default-icon"/>
                        <img src="/images/staff/hebuto.png" alt="サムネイル" class="hover-icon"/>
                      </div>
                    ) : (
                      <img src={getPostIcon(post)} alt="サムネイル"/>
                    )}
                  </div>
                  <div class="blog-content">
                    <div class="blog-meta">
                      <span class="blog-category">{post.category.name}</span>
                      <time datetime={post.date}>
                        {new Date(post.date).toLocaleDateString('ja-JP')}
                      </time>
                      <span class="blog-author">
                        {post.writer.map(w => w).join(', ')}
                      </span>
                    </div>
                    <h2 class="blog-title">
                      {post.title}
                    </h2>
                  </div>
                </article>
              </a>
            ))
          ) : (
            <div class="no-posts">
              <p>記事が見つかりませんでした。</p>
            </div>
          )}
        </div>
      </div>
    </section>
  </main>

  <Footer />
</BaseLayout>
<script>
  function initializeFilter() {
    const urlParams = new URLSearchParams(window.location.search);
    const category = urlParams.get('category') || 'all';

    document.querySelectorAll('.filter-btn').forEach(btn => {
    btn.classList.remove('active');
    if (btn.getAttribute('data-category') === category) {
      btn.classList.add('active');
      }
    });

      filterPosts(category);
    }

  function filterPosts(category: string) {
    const cards = document.querySelectorAll('.blog-card-link') as NodeListOf<HTMLElement>;

    cards.forEach(card => {
      if (category === 'all') {
        card.style.display = 'block';
        } else {
        const cardCategory = card.getAttribute('data-category');
        card.style.display = cardCategory === category ? 'block' : 'none';
        }
      });
    }

  document.querySelectorAll('.filter-btn').forEach(btn => {
    btn.addEventListener('click', (e) => {
      e.preventDefault();

      const category = btn.getAttribute('data-category') || 'all';

      const url = new URL(window.location.href);
      if (category === 'all') {
        url.searchParams.delete('category');
        } else {
        url.searchParams.set('category', category);
        }
      window.history.pushState({}, '', url);

        document.querySelectorAll('.filter-btn').forEach(b => b.classList.remove('active'));
      btn.classList.add('active');

      // 記事をフィルタリング
        filterPosts(category);
      });
    });

  document.addEventListener('DOMContentLoaded', initializeFilter);

  window.addEventListener('popstate', initializeFilter);
</script>

<style>
  .blog-page {
    background: var(--bg-primary);
    min-height: 80vh;
  }

  .blog-page h1 {
    text-align: center;
    margin-bottom: 2rem;
    color: var(--accent-blue);
  }

  /* Category Filters */
  .category-filters {
    display: flex;
    justify-content: center;
    gap: 1rem;
    margin-bottom: 3rem;
    flex-wrap: wrap;
  }

  .filter-btn {
    padding: 0.75rem 1.5rem;
    background: var(--bg-secondary);
    color: var(--text-secondary);
    text-decoration: none;
    border-radius: 25px;
    border: 2px solid var(--border-color);
    transition: all 0.3s ease;
    font-weight: 500;
  }

  .filter-btn:hover {
    background: var(--bg-tertiary);
    color: var(--text-primary);
    transform: translateY(-2px);
    box-shadow: 0 4px 8px var(--shadow-dark);
  }

  .filter-btn.active {
    background: var(--accent-blue);
    color: white;
    border-color: var(--accent-blue);
  }

  .filter-btn.active:hover {
    background: var(--accent-blue-hover);
    border-color: var(--accent-blue-hover);
  }

  /* Blog Grid */
  .blog-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));
    gap: 2rem;
  }

  .blog-card-link {
    display: block;
    text-decoration: none;
    color: inherit;
  }

  .blog-card {
    background: var(--bg-secondary);
    border-radius: 12px;
    overflow: hidden;
    transition: transform 0.3s ease, box-shadow 0.3s ease;
  }

  .blog-card-link:hover .blog-card {
    transform: translateY(-4px);
    box-shadow: 0 8px 20px var(--shadow-dark);
  }

  .blog-thumbnail {
    width: 100%;
    height: 200px;
    overflow: hidden;
    background: var(--bg-tertiary);
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .blog-thumbnail img {
    width: 100%;
    height: 100%;
    object-fit: contain;
    object-position: center;
    transition: transform 0.3s ease;
  }

  .blog-card-link:hover .blog-thumbnail img {
    object-fit: contain;
    object-position: center;
  }

  /* Icon hover functionality for お知らせ category */
  .icon-hover-container {
    position: relative;
    width: 100%;
    height: 100%;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .icon-hover-container .default-icon,
  .icon-hover-container .hover-icon {
    position: absolute;
    width: 100%;
    height: 100%;
    object-fit: contain;
    object-position: center;
    transition: opacity 0.3s ease;
  }

  .icon-hover-container .default-icon {
    opacity: 1;
  }

  .icon-hover-container .hover-icon {
    opacity: 0;
  }

  .blog-card-link:hover .icon-hover-container .default-icon {
    opacity: 0;
  }

  .blog-card-link:hover .icon-hover-container .hover-icon {
    opacity: 1;
  }

  .blog-content {
    padding: 1.5rem;
  }

  .blog-meta {
    display: flex;
    flex-wrap: wrap;
    gap: 1rem;
    margin-bottom: 1rem;
    font-size: 0.9rem;
    color: var(--text-muted);
  }

  .blog-category {
    background: var(--accent-blue);
    color: white;
    padding: 0.25rem 0.75rem;
    border-radius: 12px;
    font-size: 0.8rem;
    font-weight: 500;
  }

  .blog-author {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    font-weight: 500;
    color: var(--text-secondary);
  }

  .author-icon {
    width: 24px;
    height: 24px;
    border-radius: 50%;
    object-fit: cover;
  }

  .author-name {
    flex: 1;
  }

  .blog-title {
    margin: 0;
    color: var(--text-primary);
    font-size: 1.2rem;
    font-weight: 600;
    line-height: 1.4;
  }

  .blog-card-link:hover .blog-title {
    color: var(--accent-blue);
  }

  /* No Posts Message */
  .no-posts {
    grid-column: 1 / -1;
    text-align: center;
    padding: 4rem 2rem;
    background: var(--bg-secondary);
    border-radius: 12px;
    border: 2px dashed var(--border-color);
  }

  .no-posts p {
    color: var(--text-muted);
    font-size: 1.2rem;
    margin: 0;
  }

  /* Mobile Responsive */
  @media (max-width: 768px) {
    .blog-grid {
      grid-template-columns: 1fr;
      gap: 1.5rem;
    }

    .category-filters {
      gap: 0.5rem;
    }

    .filter-btn {
      padding: 0.5rem 1rem;
      font-size: 0.9rem;
    }

    .blog-content {
      padding: 1rem;
    }

    .blog-meta {
      gap: 0.5rem;
    }
  }
</style>